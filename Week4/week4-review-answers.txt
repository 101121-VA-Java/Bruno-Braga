SQL
1.	Explain what SQL is. What are some SQL databases?
		- SQL stands for Structured Query Language - it is a domain-specific language for working with certain databases called relational databases. SQL is not a programming language, although there are extensions to the specification like PL/SQL that add familiar programming constructs. Instead, it is an English-like syntax that lets developers and database administrators abstract away the process of manipulating data and focus on the WHAT instead of HOW in the database.

2.	Draw a simple ERD for modeling Students and Classes
		- 

3.	What are the 5 sublanguages of SQL? Which commands correspond to them?
		- DDL
Data Definition Language statements are utilized to define the database schema or skeleton. It is how we implement the design structure of it. Some of the keywords in this sublanguage are:
CREATE, to create new objects or tables.
CREATE TABLE TABLE_NAME (C_NAME C_TYPE C_SYZE [NULL | NOT NULL], [CONSTRAINT])
ALTER, to modify existing objects or tables.
ALTER TABLE TABLE_NAME [ADD | MODIFY | DROP] C_NAME
ALTER USER IDENTIFIED BY PASSWORD
DROP, to delete existing objects or tables.
DROP TABLE TABLE_NAME [CASCADE]
TRUNCATE, to delete all the data existing within a table leaving the skeleton of the table only.
TRUNCATE TABLE_NAME
This is similar to performing DELETE TABLE with no where clause, the key difference is that TRUNCATE commits at the end of the operation.
All DDL operations cannot be rolled back, which means that any change made by these are permanent.
		- DML
Data Manipulation Language statements are used to perform CRUD operations on the actual data. Operations are normally performed by row in a relational database.
- INSERT, to insert a new row into a table.
INSERT INTO TABLE_NAME VALUES (V1, V2, ..., VN)
INSERT INTO TABLE_NAME (C1, C2, C3) VALUES (V1, V2, V3)
- UPDATE, to update one or more rows column values of a table that match a specific WHERE clause.
UPDATE TABLE_NAME SET C1 = V1, ... , CN = VN WHERE X = Y
- DELETE, to delete one or more rows of a table that match a specific WHERE clause.
DELETE TABLE_NAME WHERE [condition]
- SELECT, to obtain one or more rows of a table that match a specific WHERE clause. In ORACLE databases this one is considered DML. This is how we perform queries in a database.
SELECT C1, ..., CN FROM TABLE_NAME [table] WHERE [condition] GROUP BY [expression]
HAVING [condition] ORDER BY table.field
		- DQL
Data Query Language, not really a sub-language within Oracle databases, is the sub language where only the SELECT statement exists. Remember, in Oracle the SELECT statement is considered as DML, but DQL could be an interview question.

DQL Clauses
GROUP BY & HAVING
The GROUP BY clause will combine all rows by a column specified in a query and perform any aggregate functions which are stated.

SELECT NAME, COUNT(NAME) FROM STUDENT GROUP BY (NAME)
The HAVING clause will pass another filter similar to the WHERE clause after everything has been filtered and grouped.

SELECT NAME, COUNT(NAME) FROM STUDENT GROUP BY (NAME) HAVING COUNT(NAME) > 5;
If you try to perform this HAVING clause in a WHERE clause, a SQL error will be thrown, and it makes sense - the RDBMS doesn't want you to perform an aggregate function combining all rows, per each row. It's a performance safety measure.

Scalar Functions
Scalar functions operate on individual values and will perform some operation per row, and can be used in the SELECT or WHERE clause.

TO_CHAR(DATE,'DATE_FORMAT')
TO_DATE(DATE,'DATE_FORMAT')
UPPER('VALUE')
LOWER('VALUE')
To write them in a query:

SELECT UPPER(NAME) FROM STUDENT;
SELECT NAME FROM STUDENT WHERE UPPER(NAME) LIKE 'P%'. 
Aggregate Functions
Aggregate functions operate on multiple values (multiple rows). These functions are used to combine (aggregate) the values existing in one column.

MAX(COLUMN), which returns the max value on a column.
MIN(COLUMN), which returns the minimum value on a column.
AVG(COLUMN), which returns the average value of the column.
SUM(COLUMN), which returns the sum of the column.
COUNT(COLUMN), which returns the count of elements in a column.
And many others.
These functions are used in the SELECT clause. They can't be used in the WHERE clause.

If there is more than one column being selected in the SELECT column section of a query which is not aggregating, a GROUP BY clause is required.


		- DCL
Data Control Language statements are used to manage the security and control of database systems.

GRANT, to grant any permissions to an existing user.
GRANT PERMISSION TO USERNAME
REVOKE, to revoke any permissions of an existing user.
REVOKE PERMISSION TO USERNAME

		- TCL
Transaction Control Language

4.	What is the difference between DELETE, DROP, and TRUNCATE commands?
			
		- 1. DELETE :
Basically, it is a Data Manipulation Language Command (DML). It is use to delete the one or more tuples of a table. With the help of “DELETE” command we can either delete all the rows in one go or can delete row one by one. i.e., we can use it as per the requirement or the condition using Where clause. It is comparatively slower than TRUNCATE cmd.

SYNTAX –
If we want to delete all the rows of the table:

DELETE from ; 
SYNTAX –
If we want to delete the row of the table as per the condition then we use WHERE clause,
DELETE from  WHERE  ; 
Note –
Here we can use the “ROLLBACK” command to restore the tuple.

		- 2. DROP :
It is a Data Definition Language Command (DDL). It is use to drop the whole table. With the help of “DROP” command we can drop (delete) the whole structure in one go i.e. it removes the named elements of the schema. By using this command the existence of the whole table is finished or say lost.

SYNTAX –
If we want to drop the table:
DROP table ;  
Note –
Here we can’t restore the table by using the “ROLLBACK” command.

		 - 3. TRUNCATE :
It is also a Data Definition Language Command (DDL). It is use to delete all the rows of a relation (table) in one go. With the help of “TRUNCATE” command we can’t delete the single row as here WHERE clause is not used. By using this command the existence of all the rows of the table is lost. It is comparatively faster than delete command as it deletes all the rows.

SYNTAX –
If we want to use truncate :
TRUNCATE  ;  
Note –
Here we can’t restore the tuples of the table by using the “ROLLBACK” command.

5.	What are some SQL clauses you can use with SELECT statements?

		The SELECT statement has many optional clauses:
			SELECT clause is the list of columns or SQL expressions that must be returned by the query. This is approximately the relational algebra projection operation.
			AS optionally provides an alias for each column or expression in the SELECT clause. This is the relational algebra rename operation.
			FROM specifies from which table to get the data.[3]
			WHERE specifies which rows to retrieve from. This is approximately the relational algebra selection operation.
			GROUP BY groups rows sharing a property so that an aggregate function can be applied to each group.
			HAVING selects among the groups defined by the GROUP BY clause.
			ORDER BY specifies how to order the returned rows.

		
		- DQL Clauses
GROUP BY & HAVING
The GROUP BY clause will combine all rows by a column specified in a query and perform any aggregate functions which are stated.

SELECT NAME, COUNT(NAME) FROM STUDENT GROUP BY (NAME)
The HAVING clause will pass another filter similar to the WHERE clause after everything has been filtered and grouped.

SELECT NAME, COUNT(NAME) FROM STUDENT GROUP BY (NAME) HAVING COUNT(NAME) > 5;
If you try to perform this HAVING clause in a WHERE clause, a SQL error will be thrown, and it makes sense - the RDBMS doesn't want you to perform an aggregate function combining all rows, per each row. It's a performance safety measure.

Scalar Functions
Scalar functions operate on individual values and will perform some operation per row, and can be used in the SELECT or WHERE clause.

TO_CHAR(DATE,'DATE_FORMAT')
TO_DATE(DATE,'DATE_FORMAT')
UPPER('VALUE')
LOWER('VALUE')
To write them in a query:

SELECT UPPER(NAME) FROM STUDENT;
SELECT NAME FROM STUDENT WHERE UPPER(NAME) LIKE 'P%'. 
Aggregate Functions
Aggregate functions operate on multiple values (multiple rows). These functions are used to combine (aggregate) the values existing in one column.

MAX(COLUMN), which returns the max value on a column.
MIN(COLUMN), which returns the minimum value on a column.
AVG(COLUMN), which returns the average value of the column.
SUM(COLUMN), which returns the sum of the column.
COUNT(COLUMN), which returns the count of elements in a column.
And many others.
These functions are used in the SELECT clause. They can't be used in the WHERE clause.




In order to perform similar WHERE clause Boolean operations with aggregate functions, the HAVING clause can be used.

6.	What is the difference between WHERE and HAVING?
		- In order to perform similar WHERE clause Boolean operations with aggregate functions, the HAVING clause can be used.
			
HAVING and WHERE are often confused by beginners, but they serve different purposes. WHERE is taken into account at an earlier stage of a query execution, filtering the rows read from the tables. If a query contains GROUP BY, rows from the tables are grouped and aggregated. After the aggregating operation, HAVING is applied, filtering out the rows that don't match the specified conditions. Therefore, WHERE applies to data read from tables, and HAVING should only apply to aggregated data, which isn't known in the initial stage of a query.
To view the present condition formed by the GROUP BY clause, the HAVING clause is used.

A WHERE clause in SQL specifies that a SQL Data Manipulation Language (DML) statement should only affect rows that meet specified criteria. The criteria are expressed in the form of predicates. WHERE clauses are not mandatory clauses of SQL DML statements, but can be used to limit the number of rows affected by a SQL DML statement or returned by a query. In brief SQL WHERE clause is used to extract only those results from a SQL statement, such as: SELECT, INSERT, UPDATE, or DELETE statement

7.	Explain what the ORDER BY and GROUP BY clauses do
		- If there is more than one column being selected in the SELECT column section of a query which is not aggregating, a GROUP BY clause is required.
			1. Order By :
Order by keyword sort the result-set either in ascending or in descending order. This clause sorts the result-set in ascending order by default. In order to sort the result-set in descending order DESC keyword is used.
SELECT column_1, column_2, column_3...........
FROM Table_Name
ORDER BY column_1, column_2, column_3....... ASC|DESC;

			2. Group By :
Group by statement is used to group the rows that have the same value. It is often used with aggregate functions for example:AVG(), MAX(), COUNT(), MIN() etc. One thing to remember about the group by clause is that the tuples are grouped based on the similarity between the attribute values of tuples.

Table_Name: Name of the table.
ASC: keyword for ascending order
DESC: keyword for descending order 


8.	Explain the concept of relational/referential integrity

		- Table relationships / multiplicity
Multiplicity
As mentioned before, table relationships can be defined using foreign key constraints. There are several different kinds of relationships that exist between tables in relational databases:

One to one
One to Many / Many to One
Many to Many
A one-to-one relationship means that each entity in the table only relates to a single entity in the other table. For example, if we are modeling a school, where each classroom has a single projector in it, we would want to make this relationship a one to one between the Classroom and the Projector tables. In our database, we can provide the classroom table a projector_id foreign key and provide the projector table a classroom_id foreign key. To enforce the one to one aspect, we should also apply a unique constraint on the foreign key columns. Otherwise, a user could add another projector record with the same classroom_id as an existing record, and then our one to one relationship would be broken.

A one-to-many (or vice versa, many to one) relationship is where one entity can belong to, own, or otherwise relate to multiple other entities. In our school modeling example, a Student could have many books, so this would be a one-to-many relationship. To create this in the database, we add the foreign key only on the many side of the relationship - so a book entity would have a field such as student_id as a foreign key to identify the owning student.

A many-to-many relationship implies a one-to-many relationship in both directions on the entities. For example, a Teacher can have many Students, but a Student could have many Teachers as well. In this case, we cannot provide a direct link between the tables in the database - instead, we need to create what is called a junction table or bridge table to relate the two tables. So, in our student-teacher example, we could create a Class table which contains two foreign keys - one that refers to the Teacher table's primary key and one that refers to the Student table's primary key. This creates a list of unique Teacher-Student mappings that can be used to look up which students a particular teacher teaches, or which teachers a particular student has. An example is shown below.

Class Table
ClassId	TeacherId	StudentId
1	1	1
1	1	2
2	1	3
3	2	1
3	2	3
We can see above that Teacher 1 teaches both Student 1 and 2 in the same class. Teacher 2 teaches Student 1 and 3 in a different class. Teacher 1 also has another class where he just teaches Student 3.


9.	List the integrity constraints
		- 
10.	Define the word “schema”
		- SQL Schema
This module covers schemas, constraints, multiplicity, and normalization in RDBMS systems.

Helpful References
Oracle Docs - Constraints
Defining 'Schema'
A database schema refers to the formal structure of data defined in a relational database. This includes the various tables in the database as well as their columns, data types, and the relationship between tables. Schemas are enforced using constraints when defining tables, and we can visualize the schema of relational databases through entity-relationship diagrams, or ERDs.

NOTE: In Oracle databases, schema can also refer to a logical data storage structure. Oracle systems create a separate "schema" for each database user. However, we will refer to the original definition above from now on when we mention schema. Don't let this confuse you.

11.	What is a candidate key?
		- 
12.	What conditions lead to orphan records?
		- 
13.	What are some SQL data types?
	- Data Types
When defining the properties of an entity in the database (i.e. the columns), you must specify the data type to store. Common SQL datatypes include:

Numeric
BIT
TINYINT
BIGINT
DECIMAL
NUMERIC
FLOAT
REAL
Date/Time
DATE
TIMESTAMP
DATETIME
TIME
YEAR
Character/String
CHAR
NCHAR
VARCHAR
NVARCHAR
NTEXT
Binary
BINARY
VARBINARY
IMAGE
Miscellaneous
CLOB
BLOB
XML
JSON
Each database vendor may support their own data types, or not support some of the ones listed above. Refer to the specific vendor documentation for more information.

Conventions
SQL is a case-insensitive language, but the convention is to use UPPERCASE to refer to SQL keywords and lowercase for non-SQL specific entities (like table or column names). This helps distinguish between SQL keywords and other words. Also, for readability purposes we should split long commands or queries into multiple lines.

For example, this:

SELECT * FROM table1
LEFT JOIN table2 ON table1.a = table2.b
WHERE table1.x < 5
AND table2.y > 8
ORDER BY table1.a DESC
is much more readable than:

SELECT * FROM table1 LEFT JOIN table2 ON table1.a = table2.b WHERE table1.x < 5 AND table2.y > 8 ORDER BY table1.a DESC
14.	What is normalization? What are their levels?
		- 
15.	What are the properties a transaction must follow?
		- 
16.	Explain the different isolation levels. What read phenomena do each prevent?
		- 
17.	What is the difference between joins and set operators?
		- 
18.	What are the types of joins? Explain the differences.
		- 
19.	Explain the difference between UNION, UNION ALL, and INTERSECT
		- 
20.	What is a cascade delete?
		- 
21.	What is the purpose of a view? What about an index?
		- 
22.	How would you setup a primary key that automatically increments with every INSERT statement?
		- 
23.	What is the difference between scalar and aggregate functions? Give examples of each
		- 
Be familiar with the syntax for DDL and DML/DQL queries.
	- you may be asked to write a join/ a select statement using an aggregate function.

JDBC
1.	What is JDBC?
		- 
2.	What are the core interfaces / classes in JDBC?
		- 
3.	What is a stored procedure and how would you call it in Java?
		- 
4.	What is the difference between Statement and PreparedStatement?
		- 
5.	Steps to executing an SQL query using JDBC?
		- 